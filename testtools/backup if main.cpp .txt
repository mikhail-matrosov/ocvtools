#include <opencv2/opencv.hpp>
#include <opencv2/video/background_segm.hpp>

#include <stdio.h>
#include <iostream>
#include <time.h>

#include "bgfg_linear.h"

#include "LKTracker.cpp"
#include "LKSmooth.h"
//#include "ocvGraphSegmentation/Segmentation.h"

using namespace cv;
using namespace std;

// returns milliseconds
long long time_ms() {
	struct timespec ts;
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ts);
	return ts.tv_sec*1000 + ts.tv_nsec/1000000;
}

double framerate=1;
long long prevT = 0;
double updFramerate() {
	long long t = time_ms();
	double framerateNew = 1000.0/(t-prevT);
	if (framerateNew>1.5*framerate || framerateNew*1.5<framerate) {
		framerate = framerateNew;
	} else {
		framerate = framerate*0.9 + framerateNew*0.1;
	}
	prevT = t;
	return framerate;
}

int main(int argc, char** argv) {
	BackgroundSubtractorLin *bgs = new BackgroundSubtractorLin(100, 50);
	//Ptr<BackgroundSubtractor> bgs = createBackgroundSubtractorMOG(500, 2, 0.7);

	// history, nmixtures, backgroundRatio, noiseSigma
	//bgs = createBackgroundSubtractorMOG(500, 2, 0.7);
	//BackgroundSubtractorLin bgSeg(100, 100);
	// history, varThreshold, detectShadows
	//pMOG2 = createBackgroundSubtractorMOG2(500, 100, 0); //MOG2 approach

	VideoCapture cap(1); // open the default camera
	cap.set(CV_CAP_PROP_FRAME_WIDTH, 640);
	cap.set(CV_CAP_PROP_FRAME_HEIGHT, 480);
	cap.set(CV_CAP_PROP_TEMPERATURE, 5000);

	if(!cap.isOpened())  // check if we succeeded
		return -1;

	Mat frame;
	Mat frameFG;
	Mat small;
	Mat edges;
	Mat gray, prevGray;
	//Mat mhi(960, 54, CV_32F);
	Mat segmask;
	Mat markers(480, 640, CV_32SC1);
	vector<Rect> boundingRects;
	Mat fground;
	Mat fgroundPrev;
	Mat lkField(Size(1,1), CV_32FC2);

    Size winSize(31,31);

    //vector<Point2f> points[2];

    //for (int i=0; i<MAX_COUNT; i++) {
   // 	Point2f p(random()%1280, random()%720);
    //	points[0].push_back(p);
    //}

    LKTracker lkt;

	for(;;)
	{
		cap >> frame; // get a new frame from camera

		//GaussianBlur(frame, frame, Size(0,0), 3, 3);

		//bilateralFilter(frame, edges, 0, 150, 3);

		if (prevGray.empty()) {
			cvtColor(frame, gray, COLOR_BGR2GRAY);
			gray.copyTo(prevGray);
		} else {
			gray.copyTo(prevGray);
			cvtColor(frame, gray, COLOR_BGR2GRAY);
		}

		resize(lkField, lkField, frame.size());

		//GaussianBlur(frame, frame, Size(0,0), 2, 2);
		//GaussianBlur(frame, frame, Size(9,9), 3, 3);
		//medianBlur(gray, gray, 5);
		//blur(frame, frame, Size(7,7));

		//Laplacian(gray, edges, CV_16S, 5);

		//GaussianBlur(gray, edges, Size(9,9), 3, 3);
		//Canny(edges, edges, 0, 30);
		//GaussianBlur(edges, edges, Size(7,7), 1.5, 1.5);

		//vector<Mat> channels(3);
		// split img:
		//split(frame, channels);

		//bitwise_xor(channels[0], channels[1], gray);
		//bitwise_xor(channels[2], gray, gray);

		//for(int i=0;i<3;i++)
		//	equalizeHist( channels[i], channels[i] );
		//	Canny(channels[i], channels[i], 0, 30);

		//merge(channels, edges);

		//cvtColor(edges, gray, COLOR_RGB2GRAY);
		//GaussianBlur(gray, gray, Size(5,5), 1, 1);
		//blur(gray, gray, Size(3,3));

		//compare(gray, Scalar(100), gray, CV_CMP_GT);

		fground.copyTo(fgroundPrev);

	    //update the background model
	    bgs->apply(frame, fground);
	    //pMOG2->apply(frame, fgMaskMOG2);
		//bgSeg.apply(frame, fgMaskLin);

	    medianBlur(fground, fground, 3);

	    if (fgroundPrev.empty()) fground.copyTo(fgroundPrev);
	    //medianBlur(fgMaskMOG2, fgMaskMOG2, 3);

	    //imshow("FG Mask MOG", fground);
	    //imshow("FG Mask MOG 2", fgMaskMOG2);

		//cvtColor(edges, edges, COLOR_GRAY2BGR);
		//add(frame, edges, edges);

		//updateMotionHistory(fgMaskMOG2, mhi, timestamp, 100);
		// mhi, segmask, boundingRects, timestamp, segThresh)
		//segmentMotion(mhi, segmask, boundingRects, timestamp, 1);

		//multiply(segmask, segmask, segmask, 0.01);

		//watershed(frame, markers);

		//markers.convertTo(frame,CV_8U);

		//multiply(edges, Scalar(5), edges);
		//edges = abs(edges);
		//compare(gray, Scalar(60), gray, CV_CMP_GT);

		//medianBlur(gray, gray, 5);

		//vector<vector<Pixel> > resultBuffer;

		//segmentImage(frame, resultBuffer);

		//cout << resultBuffer.size() << endl;

	    //resize(fgMaskMOG2, small, Size(0, 0), 0.5, 0.5);


        //vector<uchar> status;
        //vector<float> err;
        //calcOpticalFlowPyrLK(prevGray, gray,
        //		points[0], points[1], status, err, winSize, 5);

		lkt.apply(prevGray, gray, fgroundPrev);

		vector<Point2f> *points = lkt.getPoints();
		vector<Point2f> *vels = lkt.getVelocities();

		//multiply(fground, Scalar(0.5), fground);
		cvtColor(fground, frameFG, COLOR_GRAY2RGB);
		addWeighted(frame, 0.5, frameFG, 0.5, 0, frame);

        for( int i=0; i < points->size(); i++ ) {
        	Point2f p = points->at(i);
        	Point2f v = vels->at(i);
        	circle(frame, p, 3, Scalar(0,255,0), 2);
        	line(frame, p-v, p, Scalar(0,255,0), 2);
        }

        /*size_t i, k;
        for( i = k = 0; i < points[1].size(); i++ )
        {
            if( addRemovePt )
            {
                if( norm(point - points[1][i]) <= 5 )
                {
                    addRemovePt = false;
                    continue;
                }
            }

            if( !status[i] )
                continue;

            points[1][k++] = points[1][i];
            circle( image, points[1][i], 3, Scalar(0,255,0), -1, 8);
        }*/

	    //resize(fgMaskMOG, small, Size(0, 0), 0.5, 0.5);
		//imshow("fground", fground);
	    resize(frame, small, Size(0, 0), 0.5, 0.5);

		//imshow("xor", gray);
        char buffer[64];
        sprintf(buffer, "%dx%d, %.1f FPS", frame.cols, frame.rows, updFramerate());
        cv::putText(frame, string(buffer), Point(10, 30), 1, 1, Scalar(0,255,0));

        LKSmooth(lkField, *points, *vels);
        visualizeVField(lkField, edges);

        multiply(edges, frameFG, edges, 1.0/256);

        imshow("lk", edges);
		imshow("frame", frame);
		if(waitKey(1) >= 0) break;

		//printf("%dx%d, %.2f FPS\n", frame.cols, frame.rows, updFramerate());
	}

	//Mat image;
	//image = imread(argv[1], 1);

	//if (argc != 2 || !image.data) {
	//	printf("No image data \n");
	//	return -1;
	//}

	//namedWindow("Display Image", WINDOW_AUTOSIZE);
	//imshow("Display Image", image);

	//waitKey(0);

	return 0;
}
